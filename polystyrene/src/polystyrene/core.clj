;; Spork Factory Copyright (C) 2012 David Griffiths
;; 
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(ns polystyrene.core
  (:use clojure.java.shell)
  (:import 
   org.jgap.Chromosome
   org.jgap.FitnessFunction
   org.jgap.Genotype
   org.jgap.impl.DefaultConfiguration
   org.jgap.impl.IntegerGene
   ))

(def cycles 1000)
(def fft-chunk-size 50)
(def population-size 1000)
(def code-size 32)

(defn make-csv [l]
  (reduce
   (fn [r i]
     (str r "," i))
   "" l))

(defn parse-number [s]
  (try (Float/parseFloat (.trim s))
       (catch NumberFormatException e nil)))

;; description of the instruction set
(def opcodes (list "nop" "org" "equ" "jmp" "jmpz" "pshl"
                   "psh" "pshi" "pop" "popi" "add" "sub"
                   "inc" "dec" "and" "or" "xor" "not" "ror"
                   "rol" "pip" "pdp" "dup" "lmot" "rmot" "leye" "reye"))
  
(defn opcode [c] (nth opcodes c))

;; does it need an operand?
(defn operand? [c]
  (nth
   (list false false false true true true
         true true true true false false
         false false false false false false true
         true true true false false false false false)
   c))

(defn safe-nth [l i]
  (if (< i (count l))
    (nth l i)
    0))

;; make a string of bytecode human readable
(defn disassemble [code]
  (defn _ [r pos]
    (let [op (safe-nth code pos)]
      (cond
       (>= pos (count code)) r
       (< op (count opcodes))
       (if (operand? op)
         (_ (str r (opcode op) " " (safe-nth code (+ pos 1)) " ")
            (+ pos 2))
         (_ (str r (opcode op) " ")
            (+ pos 1)))
       :else
       (_ (str r op " ") (+ pos 1)))))
  (println code)
  (_ "" 0))

;; run the processor and pass in code
(defn run-core [cycles fft-chunk code]
  (map
   parse-number
   (.split
    (:out
     (sh "../emu/emu"
         (str cycles)
         (str fft-chunk)
         :in (make-csv code)))
    " ")))

;; run the processor and pass in code
(defn run-robot [cycles code]
  (map
   parse-number
   (.split
    (:out
     (sh "../robotgen/robotgen"
         (str cycles)
         :in (make-csv code)))
    " ")))

;; make a normal list from the allele values
(defn chromo->list [chromo]
  (defn _ [c]
    (cond
     (= (.size chromo) c) '()
     :else (cons (.getAllele (.getGene chromo c))
                 (_ (+ c 1)))))
  (_ 0))

;; writes program.h and sends to atmel chip
(defn send-to-device [code]
  (spit "../core/program.h"
        (apply str
               "// autogenerated by polystyrene\n"
               "u32 program_size=" code-size ";\n"
               "u8 program[]={\n"
               (let [s (reduce (fn [r i] (str r i ", ")) "" code)]
                 (subs s 0 (- (count s) 2))) "\n"
                 "};\n"))
  ;; uncomment to upload (takes a while)
  ;;(sh "../core/make")
  )

(defn loop-evolve-forever [population g]
  (.evolve population)
  (let [fittest (.getFittestChromosome population)
        program (chromo->list fittest)
        output (run-robot cycles program)] 
    (println g)
    (println fittest)
    (send-to-device program)
    (println (disassemble program))
    ;(apply println (partition fft-chunk-size output))
                                        ;(println (count output))
    )
  (recur population (+ g 1)))

;; ----------------------------------------------------------
;; simple ways to gauge fitness from fft

;; boring average of the list
(defn avg [l]
  (/ (reduce + 0 l) (count l)))

;; flips list of lists sideways:
;; (flip (list (list 1 2) (list 3 4) (list 5 6))) => ((5 3 1) (6 4 2))
(defn flip [l]
  (cond
   (empty? l) ()
   (empty? (first l)) ()
   :else
   (cons
    (reduce (fn [r l] (cons (first l) r)) () l)
    (flip (map (fn [l] (rest l)) l)))))

;; returns the closest distance from an ordered list
(defn closest [l c]
  (cond
   (empty? l) c
   (empty? (rest l)) c
   (< (- (second l) (first l)) c)
   (closest (rest l) (- (second l) (first l)))
   :else (closest (rest l) c)))

;; adds up the total distance from an ordered list
(defn total-dist [l]
  (cond
   (empty? l) 0
   (empty? (rest l)) 0
   :else (+ (- (second l) (first l))
            (total-dist (rest l)))))

;; average distance from an ordered list
(defn average-dist [l]
  (/ (total-dist l) (count l)))

;; compare each list of elements by looking at difference between closest
(defn compare-chopped [l]
  (if (> (count l) 1) ;; only if we have more than one fft 
    (let [sorted (sort < l)]
      (+ (average-dist sorted) ;; add the average dist (encourage spread between highest and lowest)
         (closest sorted 9999999))) ;; to the closest distance (encourage spread between each other)
    0))

;; chop frequencies into length s 
;; and compare each against the others
;; in this way, we compare the sound at different times
(defn compare-sublists [l s]
  (reduce
   (fn [r els]
     (+ (compare-chopped els) r))
   0
   (flip (partition s l))))

;; the fitness function, return value from results of program
(defn fitness [res]
  (+ 
   (* 2 (count res)) ;; more samples is good
   (avg res) ;; high average fft frequencies are good
   (compare-sublists res 50) ;; compare frequency over time to encourage changing sounds
   ))

;; the fitness function, return value from results of program
(defn robot-fitness [res]
  (first res))

;; setup jgap and go!
(defn go []
  (let [conf (DefaultConfiguration.)
        init (proxy [FitnessFunction] []
               (evaluate [chromo]
                         (let [res (run-robot cycles (chromo->list chromo))]
                           (if (and (> (count res) 0)
                                    (not (nil? (first res))))
                             (+ 1 (robot-fitness res))
                             0))))
        sample-genes (IntegerGene. conf 0 255) ;; 8bit genes
        sample-chromosome (Chromosome. conf sample-genes code-size)]
    
    (.setFitnessFunction conf init)
    (.setSampleChromosome conf sample-chromosome)
    (.setPopulationSize conf population-size)
    
    (loop-evolve-forever (Genotype/randomInitialGenotype conf) 0)))

(go)

(def bytecodes2 '(
(211 155 2 126 24 54 12 90 153 154 85 25 155 51 73 9)
(211 155 2 126 24 54 12 90 153 154 85 25 155 51 73 9)
(211 155 2 126 24 54 12 90 161 154 247 25 155 51 73 9)
(181 27 23 126 24 54 12 90 153 154 85 25 155 51 73 9)
(181 27 23 25 85 111 65 112 24 253 234 131 240 131 139 24)
(43 27 23 25 85 111 65 112 24 253 234 131 240 131 139 24)
(181 27 23 25 85 111 65 112 24 253 122 14 220 23 33 25)
(181 27 23 25 85 111 65 112 24 253 122 14 220 23 33 25)
(181 27 23 25 85 111 65 112 24 253 122 14 220 23 33 25)
(217 27 23 25 85 111 65 112 24 253 122 14 220 23 33 25)
(21 27 23 25 85 111 141 112 24 253 122 168 220 23 33 25)
(75 27 23 25 58 53 196 189 64 228 24 73 78 23 5 25)
(5 57 23 25 85 111 251 112 24 253 122 14 220 23 33 25)
(5 57 23 25 85 111 251 112 24 253 122 14 14 23 33 25)
(5 57 23 25 85 111 251 112 24 253 122 14 220 23 5 25)
(5 57 23 25 85 111 251 112 24 253 122 14 220 23 5 25)
(43 187 23 25 20 111 20 112 24 253 122 14 220 23 33 2)
(43 187 23 25 20 111 20 112 24 253 122 14 220 23 33 2)
(43 187 23 25 20 111 20 112 24 253 122 14 220 23 33 2)
(43 187 23 25 20 111 20 112 24 253 122 150 220 23 33 2)
(43 187 23 25 20 111 20 112 24 253 48 189 220 23 33 2)
(236 187 23 25 20 111 20 112 24 235 122 230 220 23 33 2)
(43 187 23 25 20 111 20 112 24 19 122 14 220 23 33 2)
(5 187 23 25 20 111 20 112 24 19 122 14 220 23 33 2)
(7 187 23 25 20 111 20 112 24 19 122 14 220 23 33 2)
(5 187 23 25 20 111 20 112 24 19 122 14 220 23 33 2)
(5 187 23 25 20 111 20 112 24 19 122 14 220 23 33 2)
(43 208 23 25 20 111 20 112 24 205 66 111 220 23 84 2)
(43 167 23 25 20 111 20 112 24 253 22 14 220 23 33 2)
(43 167 23 25 20 111 20 112 24 253 22 14 220 23 33 2)
(43 167 23 25 20 111 20 112 24 19 122 14 145 23 33 2)
(5 187 23 25 20 111 20 112 24 5 122 193 220 23 33 2)
(5 187 23 25 20 111 20 112 24 5 122 230 220 23 33 2)
(5 187 23 25 20 111 20 112 24 5 122 193 220 23 207 2)
(5 187 23 25 20 111 20 112 24 5 122 111 252 23 84 2)
(5 187 23 25 20 111 20 112 24 5 122 193 220 23 33 2)
(5 187 23 25 20 111 20 112 24 5 122 193 220 23 33 2)
(5 187 23 25 20 111 20 112 24 5 184 193 220 23 33 2)
(5 187 23 25 20 111 20 112 24 5 122 111 252 23 146 2)
(5 187 23 25 20 111 20 112 24 5 0 193 220 23 33 2)
(5 183 23 25 20 111 20 112 24 5 122 230 220 23 33 2)
(5 171 23 25 20 111 20 112 24 5 54 193 220 23 33 2)
(5 171 23 25 20 111 20 112 24 5 54 193 220 23 33 2)
(5 171 23 25 20 111 20 112 24 5 122 193 220 23 33 2)
(5 171 23 25 20 111 20 112 24 5 54 193 220 23 33 2)
(5 171 23 25 20 111 20 112 24 5 30 230 220 23 33 2)
(5 187 23 25 20 111 20 30 24 5 71 230 220 23 3 2)
(5 183 23 25 20 111 20 30 24 5 71 230 220 23 3 2)
(5 187 23 25 20 111 20 30 24 5 71 230 220 23 3 2)
(5 250 23 25 20 167 20 30 24 5 71 230 220 23 3 2)
(5 224 23 25 20 111 20 206 24 5 71 230 220 23 3 2)
(5 224 23 25 20 111 20 206 24 5 71 230 220 23 3 2)
(5 171 23 25 20 111 20 30 24 26 71 230 220 23 3 2)
(5 171 23 25 20 111 20 30 24 26 71 230 220 184 3 2)
(5 171 23 25 20 111 20 30 24 26 71 230 220 184 3 2)
(5 171 23 25 20 111 40 30 24 26 87 230 220 184 3 2)
(5 187 23 25 20 111 20 30 24 26 71 230 21 23 3 2)
(5 171 23 25 20 111 20 30 24 26 5 230 220 23 3 2)
(5 171 23 25 20 111 20 30 24 26 5 230 220 23 3 2)
(5 171 23 25 20 111 20 30 24 26 5 230 220 23 3 2)
(5 171 23 25 20 111 20 30 24 26 5 230 220 23 3 2)
(5 171 23 25 20 111 20 30 24 26 5 230 220 23 3 2)
(5 171 23 25 20 111 21 30 24 26 5 230 220 23 3 2)
(5 171 23 25 20 111 20 30 24 26 5 230 220 23 3 2)
(5 171 23 25 20 111 20 30 24 26 5 230 164 23 3 2)
(5 171 23 25 20 111 20 73 24 26 5 230 220 23 3 2)
(5 171 23 25 20 111 20 30 24 26 5 230 220 23 3 2)
(5 171 23 25 20 111 20 192 24 26 5 172 95 23 3 2)
(5 171 23 25 20 111 20 30 24 26 5 230 220 23 3 2)
(5 171 23 25 20 135 20 30 24 26 5 230 220 23 3 2)
(5 171 23 25 20 111 20 30 24 26 5 230 220 23 3 2)
(5 77 23 25 20 90 21 30 24 26 5 230 220 23 3 2)
(5 171 23 25 20 111 20 30 24 26 5 214 220 23 3 2)))


(def bytecodes '(
(243 24 138 122 114 230 6 147 83 218 56 20 95 22 67 72)
(243 24 138 122 114 230 6 147 83 218 56 20 95 139 24 137)
(243 24 138 122 114 230 6 147 83 218 56 20 95 212 24 137)
(45 24 138 122 114 230 6 147 83 218 56 20 95 212 24 137)
(243 24 138 122 114 230 6 147 83 218 56 20 95 212 24 173)
(52 202 18 230 151 114 72 26 95 23 153 194 65 24 239 24)
(52 106 18 230 151 114 72 26 95 23 153 194 65 24 239 24)
(243 24 40 122 114 114 72 26 95 23 153 194 65 24 239 24)
(243 24 138 122 114 114 72 26 95 23 153 194 65 24 239 24)
(37 24 138 230 151 114 72 26 95 23 234 20 95 22 67 72)
(243 24 138 122 153 10 72 26 95 23 153 194 65 24 239 17)
(243 24 40 122 114 114 72 26 95 23 153 194 65 24 239 17)
(25 24 195 143 114 114 72 26 55 23 153 194 65 144 239 24)
(25 24 195 143 114 114 72 26 55 23 153 194 107 144 99 24)
(25 24 138 122 151 114 72 26 95 23 153 20 95 139 24 72)
(25 24 138 122 114 114 72 26 95 23 153 20 95 139 24 137)
(25 24 88 219 151 114 72 26 95 23 153 20 95 139 24 72)
(25 24 195 122 151 25 72 26 95 23 153 194 65 24 239 24)
(25 24 158 122 114 114 72 26 95 23 153 208 45 32 132 4)
(25 24 136 116 75 114 72 26 95 23 153 29 95 4 229 24)
(25 24 138 122 114 114 72 26 95 23 153 20 95 124 132 4)
(25 24 104 142 114 67 72 26 95 23 153 20 45 32 132 4)
(25 24 136 116 75 135 72 26 95 23 153 29 71 4 247 24)
(25 24 195 143 114 114 72 26 23 15 199 194 107 124 132 4)
(25 24 195 143 30 134 72 26 23 15 153 194 45 32 132 4)
(25 24 138 143 114 114 34 26 23 15 199 194 45 124 132 4)
(25 24 108 122 30 114 72 26 23 15 199 194 107 144 132 4)
(25 24 138 143 114 114 72 26 23 15 153 214 45 32 24 4)
(25 24 138 143 114 87 72 26 23 15 199 194 107 32 24 4)
(25 24 195 143 114 114 72 26 23 15 153 214 45 32 24 4)
(25 24 195 143 114 114 72 26 23 15 199 194 107 32 24 4)
(25 24 138 143 114 114 72 26 23 15 153 214 45 32 24 4)
(25 24 135 143 114 114 72 26 23 15 153 214 45 32 24 4)
(25 24 231 143 246 123 72 26 23 15 199 194 107 32 24 4)
(25 24 138 143 114 116 72 26 23 15 153 214 45 32 24 4)
(25 24 195 143 114 114 72 26 23 145 199 250 107 32 24 4)
(25 24 138 196 114 44 122 26 23 15 247 31 107 32 24 4)
(25 24 225 169 114 114 72 26 23 15 199 194 107 32 24 4)
(25 24 138 101 114 87 72 26 23 15 199 214 169 32 24 4)
(25 24 61 143 34 114 72 26 23 15 56 252 45 32 24 4)
(25 24 172 116 75 87 160 26 23 15 153 194 107 32 24 4)
(25 24 138 143 114 226 80 26 23 15 199 194 150 32 24 4)
(25 24 132 169 114 114 72 26 23 15 250 167 45 32 24 4)))

(defn run-robot-record [cycles code f]
  (println (str "path" f ".txt"))
  (spit (str "code" (+ 1000 f) ".txt") (disassemble code))
  (spit (str "path" (+ 1000 f) ".txt")
        (:out
         (sh "../robotgen/robotgen"
             (str cycles)
             :in (make-csv code)))
        ))

(defn record-output [p f]
  (cond
   (empty? p) ()
   :else
   (do
     (run-robot-record 1000 (first p) f)
     (record-output (rest p) (+ f 1)))))

(println "2")
(record-output bytecodes 0)


